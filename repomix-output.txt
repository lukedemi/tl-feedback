This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
app/
  api/
    feedback/
      route.js
  globals.css
  layout.js
  page.js
components/
  AdditionalFeedback.jsx
  RatingFeedback.jsx
  ReasonSelection.jsx
hooks/
  useUserId.js
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
.gitignore
eslint.config.mjs
jsconfig.json
next.config.mjs
package.json
postcss.config.mjs
README.md
tailwind.config.mjs

================================================================
Files
================================================================

================
File: app/api/feedback/route.js
================
import { NextResponse } from "next/server";

// Helper to convert a value to a simple text representation.
function transformToText(value) {
  if (Array.isArray(value)) {
    return value.join(", ");
  } else if (typeof value === "object" && value !== null) {
    return JSON.stringify(value);
  } else {
    return value?.toString() || "";
  }
}

// Transform an object so that every field is simple text.
function transformDataToText(data) {
  const transformed = {};
  for (const key in data) {
    transformed[key] = transformToText(data[key]);
  }
  return transformed;
}

export async function POST(request) {
  try {
    const data = await request.json();
    console.log("Feedback received:", data);

    // Read Airtable configuration from environment variables
    const airtablePat = process.env.AIRTABLE_PERSONAL_ACCESS_TOKEN;
    const airtableBaseId = process.env.AIRTABLE_BASE_ID;
    const airtableTableName = process.env.AIRTABLE_TABLE_NAME;

    if (!airtablePat || !airtableBaseId || !airtableTableName) {
      throw new Error("Missing Airtable configuration in environment variables");
    }

    // Transform all data fields to simple text.
    const transformedData = transformDataToText(data);

    // Set the API URL for the table
    let url = `https://api.airtable.com/v0/${airtableBaseId}/${encodeURIComponent(airtableTableName)}`;
    let method = "POST";

    // If data contains a recordId, we update (PATCH) the existing record.
    if (data.recordId) {
      method = "PATCH";
      url = `${url}/${data.recordId}`;
    }

    // Prepare payload for Airtable using the transformed data
    const airtablePayload = {
      fields: transformedData,
    };

    const airtableRes = await fetch(url, {
      method,
      headers: {
        "Authorization": `Bearer ${airtablePat}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(airtablePayload),
    });

    if (!airtableRes.ok) {
      const errorText = await airtableRes.text();
      console.error("Airtable error:", errorText);
      return NextResponse.json({ success: false, error: errorText }, { status: airtableRes.status });
    }

    const airtableData = await airtableRes.json();
    // Save the returned Airtable record id to allow future upsert (update) operations.
    return NextResponse.json({ success: true, recordId: airtableData.id, airtable: airtableData });
  } catch (error) {
    console.error("Error posting to Airtable:", error);
    return NextResponse.json({ success: false, error: error.message }, { status: 500 });
  }
}

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

================
File: app/layout.js
================
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata = {
  title: "TL Feedback",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

================
File: app/page.js
================
"use client";
import { useState, useEffect } from "react";
import RatingFeedback from "../components/RatingFeedback";
import ReasonSelection from "../components/ReasonSelection";
import AdditionalFeedback from "../components/AdditionalFeedback";
import useUserId from "../hooks/useUserId";

export default function Home() {
  const userId = useUserId();
  const [stage, setStage] = useState("rating"); // "rating", "reason", "additional", "thankyou"
  const [feedback, setFeedback] = useState({
    userId: "",
    rating: "",
    reasons: [],
    customReason: "",
    followup: {},
    contact: "",
    interests: [],
    recordId: "", // store the Airtable record id here
  });

  // Once we have a userId, update our feedback state.
  useEffect(() => {
    if (userId) {
      setFeedback((prev) => ({ ...prev, userId }));
    }
  }, [userId]);

  // This helper posts the full feedback object. If Airtable returns a recordId,
  // it is returned so we can update our state.
  const submitFeedback = async (currentFeedback) => {
    const res = await fetch("/api/feedback", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(currentFeedback),
    });
    const json = await res.json();
    if (json.success && json.recordId) {
      return json.recordId;
    }
    return null;
  };

  // When the user selects a rating, update state and submit.
  const handleRatingSelected = async (rating) => {
    const newFeedback = { ...feedback, rating };
    setFeedback(newFeedback);
    const recordId = await submitFeedback(newFeedback);
    if (recordId) {
      setFeedback((prev) => ({ ...prev, recordId }));
    }
    setStage("reason");
  };

  // When the user submits their reasons, update state and submit.
  const handleReasonsSubmitted = async ({ selectedReasons, customReason }) => {
    const newFeedback = { ...feedback, reasons: selectedReasons, customReason };
    setFeedback(newFeedback);
    const recordId = await submitFeedback(newFeedback);
    if (recordId) {
      setFeedback((prev) => ({ ...prev, recordId }));
    }
    setStage("additional");
  };

  // When follow-up (additional questions) data is submitted, update state and submit.
  const handleFollowupSubmitted = async (followupData) => {
    const newFeedback = { ...feedback, followup: followupData };
    setFeedback(newFeedback);
    const recordId = await submitFeedback(newFeedback);
    if (recordId) {
      setFeedback((prev) => ({ ...prev, recordId }));
    }
    // Remain in the "additional" stage until contact info is submitted.
  };

  // When the contact info (email/name and interests) are submitted, update state and submit.
  const handleContactSubmitted = async ({ contact, interests }) => {
    const newFeedback = { ...feedback, contact, interests };
    setFeedback(newFeedback);
    const recordId = await submitFeedback(newFeedback);
    if (recordId) {
      setFeedback((prev) => ({ ...prev, recordId }));
    }
    setStage("thankyou");
  };

  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-gray-50 dark:bg-gray-900">
      <div className="w-full max-w-md bg-white dark:bg-gray-800 shadow-md rounded p-6 relative">
        {stage === "rating" && (
          <RatingFeedback onRatingSelected={handleRatingSelected} />
        )}
        {stage === "reason" && feedback.rating && (
          <ReasonSelection
            rating={feedback.rating}
            onReasonsSubmitted={handleReasonsSubmitted}
          />
        )}
        {stage === "additional" && (
          <AdditionalFeedback
            onFollowupSubmitted={handleFollowupSubmitted}
            onContactSubmitted={handleContactSubmitted}
          />
        )}
        {stage === "thankyou" && (
          <div className="p-8 bg-green-200 border border-green-400 text-green-800 rounded text-center z-10">
            <h1 className="text-2xl font-bold mb-4">Thank You!</h1>
            <p>We appreciate your feedback!</p>
          </div>
        )}
      </div>
    </div>
  );
}

================
File: components/AdditionalFeedback.jsx
================
import { useState } from "react";

export default function AdditionalFeedback({ onFollowupSubmitted, onContactSubmitted }) {
  const [stage, setStage] = useState("questions"); // "questions" then "contact"
  const [responses, setResponses] = useState({
    q1: "",
    q2: "",
    q3: ""
  });
  const [contact, setContact] = useState("");
  const [selectedInterests, setSelectedInterests] = useState([]);

  const contactOptions = [
    { text: "Interested in giving a talk", emoji: "🎤" },
    { text: "Interested in donating to TL", emoji: "💰" },
    { text: "Volunteering to help at TL meetups", emoji: "🙋" }
  ];

  const toggleInterest = (interestText) => {
    setSelectedInterests((prev) =>
      prev.includes(interestText)
        ? prev.filter((r) => r !== interestText)
        : [...prev, interestText]
    );
  };

  const handleQuestionsSubmit = (e) => {
    e.preventDefault();
    // Pass the follow-up answers to the parent.
    onFollowupSubmitted({
      highlight: responses.q1,
      bestSpeaker: responses.q2,
      improvement: responses.q3
    });
    setStage("contact");
  };

  const handleContactSubmit = (e) => {
    e.preventDefault();
    onContactSubmitted({
      contact,
      interests: selectedInterests
    });
  };

  return (
    <div>
      {stage === "questions" && (
        <>
          <div className="p-4 bg-green-200 border border-green-400 text-green-800 rounded mb-4 text-center">
            Thanks, that's been saved... want to share more?
          </div>
          <form onSubmit={handleQuestionsSubmit} className="mt-4">
            <div className="mb-4">
              <label className="block mb-1 font-medium text-white">
                What was the highlight of the event? (optional)
              </label>
              <input
                type="text"
                value={responses.q1}
                onChange={(e) => setResponses({ ...responses, q1: e.target.value })}
                className="w-full border p-2 rounded text-white bg-gray-700"
                placeholder="Your answer..."
              />
            </div>
            <div className="mb-4">
              <label className="block mb-1 font-medium text-white">
                Which speaker/topic did you enjoy the most? (optional)
              </label>
              <input
                type="text"
                value={responses.q2}
                onChange={(e) => setResponses({ ...responses, q2: e.target.value })}
                className="w-full border p-2 rounded text-white bg-gray-700"
                placeholder="Your answer..."
              />
            </div>
            <div className="mb-4">
              <label className="block mb-1 font-medium text-white">
                What could be improved for our next meetup? (optional)
              </label>
              <input
                type="text"
                value={responses.q3}
                onChange={(e) => setResponses({ ...responses, q3: e.target.value })}
                className="w-full border p-2 rounded text-white bg-gray-700"
                placeholder="Your answer..."
              />
            </div>
            <button type="submit" className="bg-blue-500 text-white py-2 px-4 rounded">
              Submit
            </button>
          </form>
        </>
      )}
      {stage === "contact" && (
        <>
          <div className="p-4 bg-green-200 border border-green-400 text-green-800 rounded mb-4 text-center">
            Thanks, that's been saved... want to share more?
          </div>
          <form onSubmit={handleContactSubmit} className="mt-8">
            <div className="mb-4">
              <label className="block mb-1 font-medium text-white">
                Would you like to share your email or name? (optional)
              </label>
              <input
                type="text"
                value={contact}
                onChange={(e) => setContact(e.target.value)}
                className="w-full border p-2 rounded text-white bg-gray-700"
                placeholder="Your email or name"
              />
            </div>
            <div className="mb-4">
              <label className="block mb-1 font-medium text-white">
                Select your interests (optional):
              </label>
              <div className="flex flex-col space-y-3">
                {contactOptions.map((option, index) => (
                  <button
                    type="button"
                    key={index}
                    onClick={() => toggleInterest(option.text)}
                    className={`border border-blue-400 rounded py-2 px-4 flex items-center justify-between hover:bg-blue-700 text-white ${
                      selectedInterests.includes(option.text)
                        ? "bg-blue-600"
                        : "bg-blue-900"
                    }`}
                  >
                    <span>
                      {option.emoji} {option.text}
                    </span>
                    {selectedInterests.includes(option.text) && (
                      <span className="text-white font-bold">✓</span>
                    )}
                  </button>
                ))}
              </div>
            </div>
            <button type="submit" className="bg-blue-500 text-white py-2 px-4 rounded">
              Submit
            </button>
          </form>
        </>
      )}
    </div>
  );
}

================
File: components/RatingFeedback.jsx
================
export default function RatingFeedback({ onRatingSelected }) {
    const ratingOptions = [
      { value: "neutral", emoji: "😐" },
      { value: "yawning", emoji: "🥱" },
      { value: "mild", emoji: "🙂" },
      { value: "delighted", emoji: "😄" },
      { value: "starstruck", emoji: "🤩" },
    ];
  
    return (
      <div className="text-center">
        <h1 className="text-xl font-bold mb-4">
          Rate your experience at Tech Lancaster
        </h1>
        <div className="flex justify-center space-x-4">
          {ratingOptions.map((option) => (
            <button
              key={option.value}
              onClick={() => onRatingSelected(option.value)}
              className="text-3xl focus:outline-none"
            >
              {option.emoji}
            </button>
          ))}
        </div>
      </div>
    );
  }

================
File: components/ReasonSelection.jsx
================
import { useState } from "react";

export default function ReasonSelection({ rating, onReasonsSubmitted }) {
  const reasonsMapping = {
    neutral: [
      { text: "Food", emoji: "🍔" },
      { text: "Organization", emoji: "📅" },
      { text: "Speakers", emoji: "🎤" },
      { text: "Talk Content", emoji: "📖" },
      { text: "Venue", emoji: "🏚️" },
      { text: "Hard to connect", emoji: "👥" },
    ],
    yawning: [
      { text: "Food", emoji: "🍔" },
      { text: "Speakers", emoji: "🎤" },
      { text: "Talk Content", emoji: "📖" },
      { text: "Venue", emoji: "🏚️" },
      { text: "Energy", emoji: "⚡" },
      { text: "Timing", emoji: "⏰" },
      { text: "Hard to connect", emoji: "👥" },
    ],
    mild: [
      { text: "Food", emoji: "🍕" },
      { text: "Atmosphere", emoji: "😊" },
      { text: "Speakers", emoji: "🎤" },
      { text: "Talk Content", emoji: "📖" },
      { text: "Met People", emoji: "👥" },
    ],
    delighted: [
      { text: "Food", emoji: "🍽️" },
      { text: "Speakers", emoji: "🎙️" },
      { text: "Talk Content", emoji: "📖" },
      { text: "Organization", emoji: "📆" },
      { text: "Atmosphere", emoji: "🎉" },
      { text: "Met People", emoji: "👥" },
    ],
    starstruck: [
      { text: "Food", emoji: "🍣" },
      { text: "Speakers", emoji: "🌟" },
      { text: "Talk Content", emoji: "📖" },
      { text: "Experience", emoji: "🏆" },
      { text: "Networking", emoji: "🥂" },
      { text: "Event", emoji: "🎊" },
    ],
  };

  // Mapping from rating value to its corresponding emoji.
  const ratingEmojis = {
    neutral: "😐",
    yawning: "🥱",
    mild: "🙂",
    delighted: "😄",
    starstruck: "🤩",
  };

  const reasons = reasonsMapping[rating] || [];
  const [selectedReasons, setSelectedReasons] = useState([]);
  const [customReason, setCustomReason] = useState("");

  const toggleReason = (reasonText) => {
    setSelectedReasons((prev) =>
      prev.includes(reasonText)
        ? prev.filter((r) => r !== reasonText)
        : [...prev, reasonText]
    );
  };

  const handleSubmit = () => {
    onReasonsSubmitted({ selectedReasons, customReason });
  };

  return (
    <div className="text-center mt-6">
      <h2 className="text-lg font-semibold mb-4 text-white">
        Why did you feel {ratingEmojis[rating]}? (Select one or more reasons)
      </h2>
      <div className="flex flex-col space-y-3">
        {reasons.map((reason, index) => (
          <button
            key={index}
            onClick={() => toggleReason(reason.text)}
            className={`border border-blue-400 rounded py-2 px-4 flex items-center justify-between hover:bg-blue-700 text-white ${
              selectedReasons.includes(reason.text)
                ? "bg-blue-600"
                : "bg-blue-900"
            }`}
          >
            <span>
              {reason.emoji} {reason.text}
            </span>
            {selectedReasons.includes(reason.text) && (
              <span className="text-white font-bold">✓</span>
            )}
          </button>
        ))}
      </div>
      <div className="mt-4">
        <label className="block mb-1 text-sm font-medium text-white">
          Other (optional):
        </label>
        <textarea
          value={customReason}
          onChange={(e) => setCustomReason(e.target.value)}
          className="w-full border p-2 rounded text-white bg-blue-800"
          placeholder="Your feedback..."
        />
      </div>
      <button
        onClick={handleSubmit}
        className="mt-4 bg-blue-500 text-white py-2 px-4 rounded"
      >
        Submit
      </button>
    </div>
  );
}

================
File: hooks/useUserId.js
================
import { useEffect, useState } from "react";

export default function useUserId() {
  const [userId, setUserId] = useState(null);

  useEffect(() => {
    let id = localStorage.getItem("userId");
    if (!id) {
      id = crypto.randomUUID();
      localStorage.setItem("userId", id);
    }
    setUserId(id);
  }, []);

  return userId;
}

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [...compat.extends("next/core-web-vitals")];

export default eslintConfig;

================
File: jsconfig.json
================
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./*"]
    }
  }
}

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;

================
File: package.json
================
{
  "name": "tl-feedback",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "fireworks-js": "^2.10.8",
    "next": "15.1.7",
    "react": "^19.0.0",
    "react-confetti": "^6.2.3",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "eslint": "^9",
    "eslint-config-next": "15.1.7",
    "postcss": "^8",
    "tailwindcss": "^3.4.1"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.js`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.mjs
================
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
};



================================================================
End of Codebase
================================================================
